[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mining Acknowledgements Sections",
    "section": "",
    "text": "While the current scholarly effort of literature review focuses on understanding published works’ vision, content, method, results, limitation, etc., we aim to find meaningful information from acknowledgment section of research papers. Although the acknowledgment section appears in most research papers, as far as we know, they do not gather much interest. We want to understand the different elements of the acknowledgment section, how they are organized, and within a specific field, are there frequently mentioned names and entities? In addition, we will discuss how to incorporate these findings to present helpful information to users when they search looking for related research interests."
  },
  {
    "objectID": "index.html#original-dataset",
    "href": "index.html#original-dataset",
    "title": "Mining Acknowledgements Sections",
    "section": "Original Dataset",
    "text": "Original Dataset\nThe original dataset of 64 papers was provided to us as a large JSON file that had a lot data within it. For our analysis of acknowledgements sections we only needed a few data points to get started. The original dataset is available below for exploration (minor change just to make it render nicely).\n\n\nShow Code for Loading the Original Dataset\nfrom IPython.display import JSON\nimport json\n\nwith open(\"data/599_lit_review.json\", \"r\") as open_f:\n    original_dataset = json.load(open_f)\n    \nJSON({\"data\": original_dataset})\n\n\n<IPython.core.display.JSON object>"
  },
  {
    "objectID": "index.html#compiled-dataset",
    "href": "index.html#compiled-dataset",
    "title": "Mining Acknowledgements Sections",
    "section": "Compiled Dataset",
    "text": "Compiled Dataset\nFor our analysis, we really only needed some metadata and a view or download link for each paper which we could then manually go and copy-paste any acknowledgements section into our dataset (we have some thoughts as to how to automate this in a later section).\nTo extract the data we needed we ran the following code:\n\n\nShow Code for Compile Dataset for Manual Addition\nimport pandas as pd\n\ncompiled_rows = []\nfor index, paper in enumerate(original_dataset):\n    # Some papers have data from CSL and some from S2\n    # Get both so we don't really have to care later on\n    \n    # Check if the paper has CSL data at all\n    if paper.get(\"csl\", None) is not None:\n        # Find or get title and url returned by CSL data\n        csl_title = paper[\"csl\"].get(\"title\", None)\n        csl_url = paper[\"csl\"].get(\"URL\", None)\n    else:\n        csl_title = None\n        csl_url = None\n\n    # Check if the paper has Semantic Scholar data at all\n    if paper.get(\"s2data\", None) is not None:\n        # Find or get title and url returned by S2 data\n        s2_title = paper[\"s2data\"].get(\"title\", None)\n        s2_url = paper[\"s2data\"].get(\"url\", None)\n    else:\n        s2_title = None\n        s2_url = None\n    \n    # Compile all results\n    compiled_rows.append({\n        \"paper_index\": index,\n        \"doi\": paper[\"doi\"],\n        \"s2id\": paper.get(\"s2id\", None),\n        \"s2_url\": s2_url,\n        \"csl_url\": csl_url,\n        \"s2_title\": s2_title,\n        \"csl_title\": csl_title,\n        \"acknowledgements_text\": None,\n    })\n    \ncompiled_dataset = pd.DataFrame(compiled_rows)\n\n\nOur dataset after adding all the acknowledgements sections is available below:\n\n\nRead and Show Data with Acknowledgements Sections Added\nfrom itables import show\nimport itables.options as table_opts\ntable_opts.lengthMenu = [5, 10, 25, 50]\n\nraw_data = pd.read_csv(\"data/raw-ack-sections.csv\")\nshow(raw_data)\n\n\n\n\n    \n      \n      paper_index\n      doi\n      s2id\n      s2_url\n      csl_url\n      s2_title\n      csl_title\n      acknowledgements_text\n    \n  Loading... (need help?)"
  },
  {
    "objectID": "index.html#ner",
    "href": "index.html#ner",
    "title": "Mining Acknowledgements Sections",
    "section": "NER",
    "text": "NER\nWe can now take each of these acknowledgements sections and run them through a named entity recognition model.\n\nimport spacy\n# import spacy_transformers\n\nnlp = spacy.load(\"en_core_web_trf\")\n\n# Filter dataset to only include rows with acknowledgements sections\nfiltered_data = raw_data.dropna(subset=[\"acknowledgements_text\"])\n\n# For each acknowledgement, run it through spacy,\n# extract entities and their labels and store to a dataframe\nentities_rows = []\ndocs = []\nfor _, paper in filtered_data.iterrows():\n    doc = nlp(paper.acknowledgements_text)\n    docs.append(doc)\n    for ent in doc.ents:\n        # Store with the DOI so we can join with other data later\n        entities_rows.append({\n            \"doi\": paper.doi,\n            \"entity\": ent.text,\n            \"entity_label\": ent.label_,\n        })\n        \nentities = pd.DataFrame(entities_rows)\n\n\n# combine names with different representation\n# entities[entities[\"entity_label\"] == \"ORG\"][\"entity\"].unique()\n\nentities['entity'] = entities['entity'].replace(['the National Science Foundation', 'National Science Foundation'], 'NSF')\nentities['entity'] = entities['entity'].replace(['Ofce of Naval Research', 'the Office of Naval Research'], 'ONS')\nentities['entity'] = entities['entity'].replace(['the ArmyResearch  Laboratory', 'the  Army  Research  Labora-tory'], 'the  Army  Research  Laboratory')\nentities['entity'] = entities['entity'].replace(['AI2'], 'the Allen Institute for AI')\nentities['entity'] = entities['entity'].replace(['the University of\\nWashington', 'National Science Foundation'], 'The University of Washington')\nentities['entity'] = entities['entity'].replace(['the Alfred P. Sloan Foun- dation', 'the Alfred\\nP. Sloan Foundation'], 'the Alfred P. Sloan Foundation')\n\n\n# How did the model tag each of these examples?\nfrom ipywidgets import interact\nfrom IPython.display import display, HTML\nfrom spacy import displacy\n\n@interact\ndef render_example(doc_index=list(range(len(docs)))):\n    return display(HTML(displacy.render(docs[doc_index], style=\"ent\")))\n\n\n\n\nHere are the most common entity types:\n\nimport altair as alt\n\nalt.Chart(entities).mark_bar().encode(\n    alt.X(\"entity_label\", sort=\"-y\"),\n    y=\"count()\",\n    color=\"entity_label\",\n    tooltip=[\"entity_label\", \"count()\"],\n).properties(\n    width=400,\n    height=300\n).interactive()\n\n\n\n\n\n\n\nA bulk of the named entities are people and organizations (which is what we would expect and what we are looking for), we can filter out the rest.\n\n# Filter all rows that aren't people or orgs\npeople_and_org_refs = entities.loc[entities.entity_label.isin([\"PERSON\", \"ORG\"])]\n\nThis is still too much data to visualize each person or org’s count so let’s just visualize a the top ten referenced people or entities.\n\n# top ten entities including people and organization\ntop_ten_entities = people_and_org_refs.value_counts(\n    subset=[\"entity\", \"entity_label\"]\n).to_frame().reset_index().rename(columns={0: \"count\"})[:10]\n\n# top ten entities only including organization\ntop_ten_entities_organization = people_and_org_refs.value_counts(\n    subset=[\"entity\", \"entity_label\"]\n).to_frame().reset_index().rename(columns={0: \"count\"})[:10]\n\n\n# visulize top 10 entities including people and organizations\nalt.Chart(top_ten_entities).mark_bar().encode(\n    alt.X(\"entity\", sort=\"-y\"),\n    y=\"count\",\n    color=\"entity\",\n    tooltip=[\"entity\", \"entity_label\", \"count\"],\n).properties(\n    width=400,\n    height=300\n).interactive()\n\n\n\n\n\n\n\n# only visulize top 10 organizations\nalt.Chart(top_ten_entities_organization).mark_bar().encode(\n    alt.X(\"entity\", sort=\"-y\"),\n    y=\"count\",\n    color=\"entity\",\n    tooltip=[\"entity\", \"entity_label\", \"count\"],\n).properties(\n    width=400,\n    height=300\n).interactive()"
  },
  {
    "objectID": "index.html#classifying-recognition",
    "href": "index.html#classifying-recognition",
    "title": "Mining Acknowledgements Sections",
    "section": "Classifying Recognition",
    "text": "Classifying Recognition\nblah"
  },
  {
    "objectID": "index.html#incorporate-organization-information-in-scholar-search-engine",
    "href": "index.html#incorporate-organization-information-in-scholar-search-engine",
    "title": "Mining Acknowledgements Sections",
    "section": "Incorporate organization information in Scholar Search Engine",
    "text": "Incorporate organization information in Scholar Search Engine\nThe organization names we extracted from the acknowledgement section can provide funding information for researchers. It also tells users which organizations and institutes are interested in related research topics. Here we discussed several ways we can use this information in different search process.\n\nOn the Search Page\n\n\n\n\nSearch Page\n\n\n\n\n\nfunding\n\n\n\nRelated Funding Opportunities  balah balah"
  }
]